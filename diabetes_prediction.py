# -*- coding: utf-8 -*-
"""Diabetes-Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1URrrBiOCZCfjNEvqsvHg8yWpxIdODIhR

Import Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

"""

# loading the dataset
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

# printing first 5 rows
diabetes_dataset.head()

# finding number of rows and coloumns
diabetes_dataset.shape

# Taking statistica data from the dataset
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> Non-Diabetic
1 --> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# seperating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Splitting into Test and Train data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state= 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel='linear')

# training the support vector machine classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the training data : ', test_data_accuracy)

"""**Making a Predictive System**"""

input_data = (0,137,40,35,168,43.1,2.288,33)

#changing the inout data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are prediciting for one instance
input_data_reshaped  = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0] == 0):
  print("The person don't have Diabetic")
else:
  print('The person has Diabetics')